// KrapKart: Season Tour, by segfaultdev.
// 
// Note that this is the resulting code after preprocessing, generating
// and combining all the files that make the game using the GNU CPP
// tool. You may find such files at the following URL:
// 
// https://github.com/segfaultdev/krapkart

// Optimization to-do list (GOAL: 4096 faces @ 60 FPS) (REAL: 11000 faces @ 27 FPS):
// - [x] Merge contiguous spans (21% draw call reduction).
// - [x] Replace heaps with column buckets (25% render speed-up).
// - [x] Convert all math function calls to pure JavaScript.
// - [x] Disregard light order (and use vertex instead of center for point lights).
// - [x] Switch to requestAnimationFrame().
// - [x] Preallocate all arrays in render (22% render speed-up).
// - [x] Forcing "const" to go through the code generator (23% render speed-up).
// - [ ] Implement per-object frustum culling.
// - [ ] Implement per-face frustum culling (might be too slow, test first).
// - [ ] Make lower-poly models for objects that are far away.

// Features to-do list:
// - [x] Fix editor page bar gradients.
// - [x] Design height state for editor.
// - [x] Implement player movement.
// - [ ] Implement smart camera.
// - [ ] Implement collision detection and laps.
// - [ ] Implement race replays.

#define SCREEN_SIZE 128

#define DECOR_Y -2.0

#define STATE_GAME   0
#define STATE_EDITOR 1
#define STATE_INTRO  2
#define STATE_COUNT  3

#include <js_inject.ij>
#include <profile.ij>
#include <render.ij>
#include <font.ij>
#include <unit.ij>

#include <g_fonts.ij>

#include <s_editor.ij>
#include <s_intro.ij>
#include <s_game.ij>

unit_t units[];
int heights[];

profile_t profile;
render_t render;

font_t font;

int state = STATE_INTRO;
int target_state = STATE_INTRO;

double target_opacity = 0.0;

double last_delta_ms = 16.667;
double mean_delta_ms = 16.667;

double mouse_x;
double mouse_y;

bool p_mousePressed = false;
bool is_debug = false;

void main() {
  units = new unit_t[TRACK_WIDTH * TRACK_HEIGHT];
  heights = new int[(TRACK_WIDTH / 2 + 1) * (TRACK_HEIGHT + 1)];
  
  for (int i = 0; i < TRACK_WIDTH * TRACK_HEIGHT; i++) {
    units[i] = new unit_t(-1, -1, 0, 0);
  }
  
  for (int i = 0; i < TRACK_HEIGHT + 1; i++) {
    for (int j = 0; j < TRACK_WIDTH / 2 + 1; j++) {
      if (i == 0 || j == 0 || i == TRACK_HEIGHT || j == TRACK_WIDTH / 2) {
        heights[j + i * (TRACK_WIDTH / 2 + 1)] = -1;
      } else {
        heights[j + i * (TRACK_WIDTH / 2 + 1)] = 0;
      }
    }
  }
  
  profile = new profile_t();
  render = new render_t(0, 0, 320, SCREEN_SIZE, SCREEN_SIZE);
  
  font = new font_t(g_font55_png);
  
  init();
  
  profile.begin();
  animate(draw, 32);
}

void init() {
  if (state == STATE_GAME) {
    game_init();
  } else if (state == STATE_EDITOR) {
    editor_init();
  } else if (state == STATE_INTRO) {
    intro_init();
  }
}

void draw() {
  profile.next("VSync idle");
  
  background(
    round(85.0 + (31.0 - 85.0) * target_opacity),
    round(170.0 + (31.0 - 170.0) * target_opacity),
    round(255.0 + (31.0 - 255.0) * target_opacity)
  );
  
  render.init_frame();
  
  if (state == STATE_GAME) {
    game_loop(last_delta_ms);
  } else if (state == STATE_EDITOR) {
    editor_loop(last_delta_ms);
  } else if (state == STATE_INTRO) {
    intro_loop(last_delta_ms);
  }
  
  if (abs(target_opacity) >= 0.005) {
    for (int i = 0; i < render.span_count; i++) {
      render.spans[i].red += (31.0 - render.spans[i].red) * target_opacity;
      render.spans[i].green += (31.0 - render.spans[i].green) * target_opacity;
      render.spans[i].blue += (31.0 - render.spans[i].blue) * target_opacity;
    }
  }
  
  if (target_state != state) {
    target_opacity += (1.0 - target_opacity) * (1.0 - pow(0.02, last_delta_ms / 1000.0));
    
    if (abs(target_opacity - 1.0) < 0.005) {
      state = target_state;
      init();
    }
  } else {
    target_opacity += (0.0 - target_opacity) * (1.0 - pow(0.02, last_delta_ms / 1000.0));
  }
  
  if (is_debug) {
    double frame_rate = round(100000.0 / mean_delta_ms) / 100.0;
    
    font.text_shadow(render, frame_rate + " FPS", 0, 0, R(256), 1, 255.0, 255.0, 255.0, 85.0, 85.0, 85.0);
    profile.next("Shift+P debug text");
  }
  
  render.draw_lines();
  profile.next("S-buffer draw");
  
  profile.end();
  
  last_delta_ms = profile.get_total();
  mean_delta_ms = mean_delta_ms + (last_delta_ms - mean_delta_ms) * 0.1;
  
  mouse_x = (mouseX * render.column_count) / 320.0;
  mouse_y = (mouseY * render.line_count) / 320.0;
  
  p_mousePressed = mousePressed;
  
  profile.begin();
}

void on_event(js_event_t event) {
  if (event.name == "key_pressed") {
    if (event.data_string[0] == "p") {
      profile.show();
      return;
    } else if (event.data_string[0] == "P") {
      is_debug = !is_debug;
      return;
    }
  }
  
  if (state == STATE_GAME) {
    game_on_event(event);
  } else if (state == STATE_EDITOR) {
    editor_on_event(event);
  } else if (state == STATE_INTRO) {
    intro_on_event(event);
  }
}
