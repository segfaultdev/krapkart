#ifndef __OBJECT_IJ__
#define __OBJECT_IJ__

// === object.ij ===

class object_t {
  bool free;
  vector_t point;
  
  double angle_x;
  double angle_y;
  
  face_t faces[];
  double radius;
  
  double ray_length;
  vector_t ray_normal;
  
  object_t() {
    this.free = true;
  }
  
  object_t(vector_t point, double angle_x, double angle_y, face_t faces[]) {
    this.free = false;
    this.point = point;
    
    this.angle_x = angle_x;
    this.angle_y = angle_y;
    
    this.faces = faces;
    this.radius = 0.0;
    
    for (int i = 0; i < faces.length; i++) {
      double radius_a = faces[i].a.length();
      double radius_b = faces[i].b.length();
      double radius_c = faces[i].c.length();
      
      if (radius_a > this.radius) {
        this.radius = radius_a;
      }
      
      if (radius_b > this.radius) {
        this.radius = radius_b;
      }
      
      if (radius_c > this.radius) {
        this.radius = radius_c;
      }
    }
  }
  
  /*
  bool beam_ray(vector_t point, vector_t normal) {
    bool ray_hit = false;
    
    double ray_length;
    vector_t ray_normal;
    
    const double a = point.dot(this.faces[i].normal);
    
    for (int i = 0; i < this.faces.length; i++) {
      const double b = this.faces[i].a.dot(this.faces[i].normal);
      
      const double dy = (normal.x * this.faces[i].normal.z - this.faces[i].normal.x * normal.z) / (this.faces[i].normal.y * normal.z - normal.y * this.faces[i].normal.z);
      const double dz = (normal.x - normal.y * dy) / normal.z;
      
      const double py = (normal.z * b - this.faces[i].normal.z * a) / (this.faces[i].normal.y * normal.z - normal.y * this.faces[i].normal.z);
      const double pz = (a - normal.y * py) / normal.z;
      
      const vector_t delta = new vector_t(1.0, dy, dz);
      const vector_t point = new vector_t(0.0, py, pz);
      
      
    }
  }
  */
  
  bool cast_ray(vector_t point, vector_t delta, bool do_sign) {
    bool ray_hit = false;
    
    double ray_length;
    vector_t ray_normal;
    
    for (int i = 0; i < this.faces.length; i++) {
      const vector_t normal = this.faces[i].a.subtract(this.faces[i].b).cross(this.faces[i].a.subtract(this.faces[i].c));
      const double base = normal.dot(delta);
      
      if (base == 0.0) {
        continue;
      }
      
      if (!do_sign) {
        const double cos_face = abs(base / (delta.length() * normal.length()));
        
        if (cos_face < 0.707) {
          continue;
        }
      }
      
      const double lambda = normal.dot(this.faces[i].a.subtract(point)) / base;
      const double length = lambda * delta.length();
      
      if (do_sign && length < -5.0) {
        continue;
      }
      
      const vector_t ray_point = point.add(delta.multiply(lambda));
      const double t_area = normal.length_2();
      
      if (t_area == 0.0) {
        continue;
      }
      
      const double b_area = this.faces[i].b.subtract(this.faces[i].a).cross(ray_point.subtract(this.faces[i].a)).dot(normal) / t_area;
      const double c_area = ray_point.subtract(this.faces[i].a).cross(this.faces[i].c.subtract(this.faces[i].a)).dot(normal) / t_area;
      const double a_area = 1.0 - (b_area + c_area);
      
      if (a_area < -0.001 || a_area > 1.001 || b_area < -0.001 || b_area > 1.001 || c_area < -0.001 || c_area > 1.001) {
        continue;
      }
      
      if (!ray_hit || (do_sign && length < ray_length) || (!do_sign && abs(length) < abs(ray_length))) {
        ray_length = length;
        ray_normal = normal;
        
        ray_hit = true;
      }
    }
    
    if (ray_hit) {
      this.ray_length = ray_length;
      this.ray_normal = ray_normal;
    }
    
    return ray_hit;
  }
};

// ^^^ object.ij ^^^

#endif
